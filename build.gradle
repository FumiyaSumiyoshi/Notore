buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.5.1.RELEASE")
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
	    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	    compile('org.springframework.boot:spring-boot-starter-web')
	    runtime('org.springframework.boot:spring-boot-devtools')
	    runtime('mysql:mysql-connector-java')
	    compileOnly('org.projectlombok:lombok')
	    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	    testCompile('org.springframework.boot:spring-boot-starter-test')
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'eclipse'

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

def jdkVersion = 1.8
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

repositories {
    jcenter()
}

dependencies {
    
    compile "org.springframework.boot:spring-boot-starter-web"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}

import org.gradle.plugins.ide.eclipse.model.SourceFolder
eclipse {
    
    project {
        
        natures 'org.springframework.ide.eclipse.core.springnature'
        
        natures 'org.springsource.ide.eclipse.gradle.core.nature'
        
        buildCommand 'org.springframework.ide.eclipse.core.springbuilder'
    }
    
    pathVariables 'GRADLE_USER_HOME': gradle.gradleUserHomeDir

    classpath {
        
        downloadSources = true
        downloadJavadoc = true

        file {
            
            beforeMerged { classpath ->
                // classpath.entries.clear()
                classpath.entries.removeAll { it.kind == "src" }
            }

            
            whenMerged { classpath ->
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/java")      }*.output = "build/classes/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/resources") }*.output = "build/resources/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/java")      }*.output = "build/classes/test"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/resources") }*.output = "build/resources/test"
                classpath.entries.removeAll { it.kind == "output" }
            }
        }
    }
    
    jdt {
        
        /*
        file {
            def props = new Properties()
            props.load(new FileInputStream("${projectDir}/template/org.eclipse.jdt.core.prefs"))
            withProperties { properties -> properties.putAll(props) }
        }
        */
    }
}